import socket
import nmap
import subprocess
import re
import os
import json


pathToHelper = '/home/testUserKali/Desktop/OFFENSEDEFENSELAB/offensive/virtualEnv/pentest/helper.sh'
pathToNetworkInfo = '/home/testUser/Desktop/OFFENSEDEFENSELAB/offensive/virtualEnv/pentest/network-information.txt'

networkFile = ''
networkFileLines = ''

def cold_start():
    subprocess.run(['bash', './offensive/virtualEnv/pentest/helper.sh'])
networkFile = open('./offensive/virtualEnv/pentest/network-information.txt')
networkFileLines = networkFile.readlines()


#gets ipv4 address of current computer
def get_ipv4_address():
    return networkFileLines[1].strip()

#either selects a user designated subnet or uses the default one from get_subnet_address()
def get_target_subnet():

    defaultAddress = networkFileLines[2].strip()
    print("running get_target()")
    pattern = re.compile(
        r'^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}'
        r'(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})/'
        r'([0-9]|[1-2][0-9]|3[0-2])$'
    )

    user = input('enter target (if none is chosen, default will be used): ')

    if pattern.match(user):
        print("valid subnet address: ", user)
        return user
    else:
        print("invalid subnet address format, using default address: ", defaultAddress)
        return defaultAddress

#finds all reachable hosts in the target subnet address
def get_all_reachable_hosts(target):
    
    ps = nmap.PortScanner()
    ps.scan(hosts = target, arguments = '-sn -T5')

    return ps

#returns list of strings which are host ipv4 addresses
def get_available_ports(hosts):

    #service and portscan on devices that are UP
    nm = nmap.PortScanner()
    hostsString = ' '.join(hosts)
    nm.scan(hosts = hostsString, arguments='-Pn -sV -T5')
    hosts = nm.all_hosts()

    #turns the data from previous scan into a dictionary 
    hostData = {}
    for host in hosts: 
        hostName = host
        hostInfo = nm[host]
        hostData[hostName] = hostInfo

    #puts that into a json file for future use
    with open('./offensive/virtualEnv/pentest/host-information.json', 'w') as f:
        json.dump(hostData, f, indent=4)
    
    #loops through the dictionary and prints the open ports of each host
    allPorts = {}

    for host in hostData.keys():
    
        openPorts = []

        for port in hostData[host]["tcp"]: 

            if hostData[host]["tcp"][port]['state'] == 'open':
                portName = {port:hostData[host]["tcp"][port]["name"]}
                openPorts.append(portName)
        allPorts[host] = openPorts
    
    return allPorts

            
def main():
    
    if not os.path.exists('./offensive/virtualEnv/pentest/network-information.txt'):
        cold_start()

    ipAddress = get_ipv4_address()
    #print(f"""ipv4 address: {ipAddress}""")

    target = get_target_subnet()
    #print(f"""target subnet: {target}""")

    nmScan = get_all_reachable_hosts(target)
    allHosts = nmScan.all_hosts()

    try:
        allHosts.remove(ipAddress)
    except ValueError:
        pass

    #print(f"""all reachable hosts: {allHosts}""")

    availablePorts = get_available_ports(allHosts)
    
    print(availablePorts)

main()