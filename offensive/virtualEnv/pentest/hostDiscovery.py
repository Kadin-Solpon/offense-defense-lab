import socket
import nmap
import subprocess
import re
import os

pathToHelper = '/home/testUserKali/Desktop/OFFENSEDEFENSELAB/offensive/virtualEnv/pentest/helper.sh'

networkFile = ''
networkFileLines = ''

def cold_start():
    subprocess.run(['bash', './offensive/virtualEnv/pentest/helper.sh'])
    networkFile = open('./offensive/virtualEnv/pentest/network-information.txt')
    networkFileLines = networkFile.readlines()

#finds the subnet that my device is on
def get_default_subnet_address():
    subnetAddress = subprocess.run(['bash', '-c', f"""source {pathToHelper} && get_network_address"""], check=True, capture_output=True, text=True)

    return subnetAddress.stdout.strip()

#gets ipv4 address of current computer
def get_ipv4_address():
    ip = subprocess.run(['bash', '-c', f"""source {pathToHelper} && get_ipv4_address"""], check=True, capture_output=True, text=True)

    print("py", ip.stdout.strip())
    return ip.stdout.strip()

#either selects a user designated subnet or uses the default one from get_subnet_address()
def get_target_subnet(defaultAddress):
    print("running get_target()")
    pattern = re.compile(
        r'^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}'
        r'(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})/'
        r'([0-9]|[1-2][0-9]|3[0-2])$'
    )

    user = input('enter target (if none is chosen, default will be used): ')

    if pattern.match(user):
        print("valid subnet address: ", user)
        return user
    else:
        print("invalid subnet address format, using default address: ", defaultAddress)
        return defaultAddress

#finds all reachable hosts in the target subnet address
def get_all_reachable_hosts(target, hostI):
    
    print('running get_all_reachable_hosts()')
    ps = nmap.PortScanner()
    ps.scan(hosts = target, arguments = '-sn -T5')

    return ps

#returns list of strings which are host ipv4 addresses
def get_available_ports(ps):
    
    allHosts = ps.all_hosts()
    

def main():
    
    if not os.path.exists('./offensive/virtualEnv/pentest/network-information.txt'):
        cold_start()

    print(networkFileLines)

    ps = nmap.PortScanner()
    ps.scan(hosts = '10.0.2.0/24', arguments= '-sn -T5')
    print(ps.all_hosts())
    
  
main()